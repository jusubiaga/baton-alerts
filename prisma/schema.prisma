// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  catalogs              Catalog[]
  intregrations         Intregration[]
  runs                  Run[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model IntregrationType {
  id            String         @id @default(cuid())
  name          String
  description   String
  logo          String         @default("")
  status        String         @default("")
  intregrations Intregration[]
  rules         Rule[]
}

model Intregration {
  id                 String           @id @default(cuid())
  userId             String
  intregrationTypeId String
  clientId           String
  clientSecret       String
  campaignPrefix     String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  intregrationType   IntregrationType @relation(fields: [intregrationTypeId], references: [id], onDelete: Cascade)

  @@unique([userId, intregrationTypeId])
}

model Rule {
  id                 String           @id @default(cuid())
  name               String
  description        String           @default("")
  available          Boolean          @default(false)
  avatar             String           @default("")
  catalogs           Catalog[]
  intregrationTypeId String
  intregrationType   IntregrationType @relation(fields: [intregrationTypeId], references: [id], onDelete: Cascade)
  runs               Run[]

  @@unique([id, intregrationTypeId])
}

model Catalog {
  id            String  @id @default(cuid())
  tags          String?
  active        Boolean
  hour          Int     @default(0)
  min           Int     @default(0)
  frequency     Int     @default(0)
  postMeridiem  Boolean @default(false)
  minimumNumber Int     @default(0)
  userId        String
  ruleId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  rule          Rule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@unique([userId, ruleId])
}

enum RunStatus {
  NORUN
  Ok
  ERROR
}

model Run {
  id     String   @id @default(cuid())
  date   DateTime
  userId String
  ruleId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rule   Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  status RunStatus @default(NORUN)
  errors String
}
